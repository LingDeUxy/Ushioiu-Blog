{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}},"post_list":[{"title":"博客公告","uid":"bdcd2d68ae9a7e36348f5757efa8e7a8","slug":"博客公告","date":"2023-06-27T12:40:23.000Z","updated":"2023-07-03T11:31:56.058Z","comments":true,"path":"api/articles/博客公告.json","keywords":null,"cover":"/img/post/bg-joker.png","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":311,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"公告","slug":"公告","count":1,"path":"api/tags/公告.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}},"feature":true},{"title":"hexo+aurora快速搭建（2）配置信息","uid":"9d669c6d3b75627c35fa616129c34ee4","slug":"hexo+aurora快速搭建（2）配置信息","date":"2023-06-27T12:27:46.000Z","updated":"2023-07-06T11:08:20.173Z","comments":true,"path":"api/articles/hexo+aurora快速搭建（2）配置信息.json","keywords":null,"cover":"https://source.unsplash.com/Zt5KC97bAHQ/1200x628","text":"快速配置推荐文章配置前面我们已经配置了about页面，关于里面内容后续在添加即可。 推荐文章注意点 如上图所示，推荐文章部分显示需要有3篇文章时才会生效，如果不够就默认不会显示者一块区域，也可能会影响下面全部文章的显示。 项目根目录下的_config.aurora.yml里面（大...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"hexo","slug":"hexo","count":2,"path":"api/categories/hexo.json"}],"tags":[{"name":"hexo","slug":"hexo","count":2,"path":"api/tags/hexo.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}},"feature":true},{"title":"hexo+aurora快速搭建","uid":"d89b2fe5b495167a2d209b5600ce7615","slug":"hexo+aurora快速搭建","date":"2023-06-26T12:32:20.000Z","updated":"2023-07-03T11:38:26.809Z","comments":true,"path":"api/articles/hexo+aurora快速搭建.json","keywords":null,"cover":"https://source.unsplash.com/9KcHl3Tp79k/1200x628","text":"Hexo快速上手ps：如果完全是小白的话，可以先了解使用一下npm（使用过或者知道怎么使用，有一定前端知识就可以看下面的了，如果过程中有什么模糊的词汇，可以先百度看看，要不容易踩坑，都是过来人-0.0-） 环境需求 npm install -g hexo-cli 官方文档➡文档 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"hexo","slug":"hexo","count":2,"path":"api/categories/hexo.json"}],"tags":[{"name":"hexo","slug":"hexo","count":2,"path":"api/tags/hexo.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}},"feature":true},{"title":"Nginx","uid":"af6a277a1f79cc7652a602f9f57ed64f","slug":"Nginx","date":"2023-07-06T11:02:33.000Z","updated":"2023-07-06T11:10:21.060Z","comments":true,"path":"api/articles/Nginx.json","keywords":null,"cover":"https://picx.zhimg.com/v2-e68d524210343613129267bd2cb75a0d_1440w.jpg?source=172ae18b","text":"Nginx详解 正向代理 正向代理（forward）意思是一个位于客户端和原始服务器 (origin server) 之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标 (原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。 正向代理是为...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"服务器","slug":"服务器","count":1,"path":"api/categories/服务器.json"}],"tags":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/tags/Nginx.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}},{"title":"Spring事务传播机制","uid":"77f213291e2f36c95ae014c6c6641222","slug":"Spring事务传播机制","date":"2023-07-06T07:02:33.000Z","updated":"2023-07-06T07:02:36.391Z","comments":true,"path":"api/articles/Spring事务传播机制.json","keywords":null,"cover":"https://source.unsplash.com/9KcHl3Tp79k/1200x628","text":"Spring事务传播机制简单理解，加入A方法在执行中调用B方法，然后A方法事务是否对B方法事务，B方法是否有事务，是否能对A方法事务产生影响，这些都是传播机制决定的。 7种传播机制● REQUIRED：如果当前存在事务，则加入该事务；如果不存在事务，则创建一个新的事务。这是默认的...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"事务传播机制","slug":"事务传播机制","count":1,"path":"api/tags/事务传播机制.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}},{"title":"JEECG低代码平台入门","uid":"355e4e72c743c63d64d3d438f298fc52","slug":"JEECG低代码平台入门","date":"2023-07-01T02:01:21.000Z","updated":"2023-07-03T11:29:06.307Z","comments":true,"path":"api/articles/JEECG低代码平台入门.json","keywords":null,"cover":"/img/post/image-20230703171414615.png","text":"JEECG低代码平台 官网：JEECG官方网站 - 基于BPM的低代码开发平台 一、下载源码标题栏下载按钮或者源码下载 — JEECG低代码开发平台 - 官方网站 （vue2，vue3咱们都说一下） 环境条件：jdk，mysql，redis，idea 二、运行源码项目db目录下有...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"低代码","slug":"低代码","count":1,"path":"api/categories/低代码.json"}],"tags":[{"name":"JEECG","slug":"JEECG","count":1,"path":"api/tags/JEECG.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}},{"title":"国内开通GPT Plus","uid":"97946a16fb1f65d448ceb90e1204d329","slug":"国内开通GPT","date":"2023-05-20T12:28:49.000Z","updated":"2023-07-03T11:36:51.428Z","comments":true,"path":"api/articles/国内开通GPT.json","keywords":null,"cover":"/img/post/gpt.jpg","text":"一、ChatGPT Plus升级到付费版的ChatGPT Plus好处自然不用说，懂的都懂。比如稳定，无字数限制，不会有错误等等。本文就分享一下本人(以及若干ChatGPT Plus爱好者+群友)亲测有效的ChatGPT Plus付费版升级流程。注册门槛说实话有点高，总结起来其实...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"AI","slug":"AI","count":1,"path":"api/categories/AI.json"}],"tags":[{"name":"GPT","slug":"GPT","count":1,"path":"api/tags/GPT.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}},{"title":"设计模式-4行为型","uid":"d9d546a3845e2f02675addd2c83d359c","slug":"设计模式4-行为型","date":"2022-12-25T04:01:46.000Z","updated":"2023-07-10T11:35:40.025Z","comments":true,"path":"api/articles/设计模式4-行为型.json","keywords":null,"cover":"https://source.unsplash.com/VivsxaizzVE/1200x628","text":"———————行为型模式———————策略模式在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。 在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的context对象。策略对象改变context对象的执行算法。 定义一...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}},{"title":"设计模式-3结构型","uid":"76ea06e5385949b20227d2bc700d9a86","slug":"设计模式-3结构型","date":"2022-12-24T02:31:09.000Z","updated":"2023-07-10T10:46:04.942Z","comments":true,"path":"api/articles/设计模式-3结构型.json","keywords":null,"cover":"https://source.unsplash.com/VivsxaizzVE/1200x628","text":"设计模式-3结构型适配器模式适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。 这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。 将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}},{"title":"设计模式-2创建型","uid":"624c128252ebb259922a7e5e7b2f25d4","slug":"设计模式-2创建型","date":"2022-12-23T03:42:12.000Z","updated":"2023-07-10T11:29:19.508Z","comments":true,"path":"api/articles/设计模式-2创建型.json","keywords":null,"cover":"https://source.unsplash.com/VivsxaizzVE/1200x628","text":"设计模式-2——创建型模式——工厂模式工厂模式（Factory Pattern）是Java中最常用的设计模式之一。 在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}},{"title":"设计模式","uid":"deffdaaa2a24a19ee257667b3b36743c","slug":"设计模式","date":"2022-12-23T03:22:13.000Z","updated":"2023-07-10T08:08:02.750Z","comments":true,"path":"api/articles/设计模式.json","keywords":null,"cover":"https://source.unsplash.com/VivsxaizzVE/1200x628","text":"一、设计模式的六大原则（SOLID）总原则——开闭原则（Open Closed Principle） 一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。 在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}},{"title":"索引失效及解决方案","uid":"cf2530e605eef344277b43fda2e83990","slug":"索引失效及解决方案","date":"2022-11-09T02:18:21.000Z","updated":"2023-07-06T07:30:13.191Z","comments":true,"path":"api/articles/索引失效及解决方案.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.peU5b4iXsv9YM_os6ZD7CgAAAA?w=154&h=180&c=7&r=0&o=5&pid=1.7","text":"索引失效及解决方案失效原因&#x2F;场景 索引列不独立 使用了左模糊 使用 or 查询部分字段没有使用索引 字符串条件没有使用 ‘’ 不符合最左前缀原则的查询 索引字段没有添加 not null 约束 隐式转换导致索引失效 索引列不独立是指 被索引的这列不能是表达式的一部分，不...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据库","slug":"数据库","count":1,"path":"api/categories/数据库.json"}],"tags":[{"name":"索引失效","slug":"索引失效","count":1,"path":"api/tags/索引失效.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}},{"title":"系统架构演变","uid":"4d8037d4e1b16b3676d4b80209195ebc","slug":"系统架构发展","date":"2022-10-10T12:18:21.000Z","updated":"2023-07-06T07:03:23.739Z","comments":true,"path":"api/articles/系统架构发展.json","keywords":null,"cover":"/img/post/image-20230705191839467.png","text":"1.单体架构比如我们一开始写的ssm框架就是，从数据库访问层，业务逻辑层，控制层，从前端到后端都是一起开发的单体应用。 优点：部署在一个节点上，维护方便，开发方便。 缺点：一处错可能导致应用出错，代码耦合性高，不方便扩展，不利于开发大项目 2.垂直应用架构随着访问量的逐渐增大，单...","link":"","photos":[],"count_time":{"symbolsCount":650,"symbolsTime":"1 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"系统架构","slug":"系统架构","count":1,"path":"api/tags/系统架构.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}},{"title":"HashMap底层原理","uid":"5c0f27a0ed8d73f08892501931e4fc3a","slug":"HashMap底层原理","date":"2022-10-03T02:42:33.000Z","updated":"2023-07-06T07:04:43.629Z","comments":true,"path":"api/articles/HashMap底层原理.json","keywords":null,"cover":"/img/post/like.jpg","text":"HashMap的原理与实现JDK1.8之前：数组+链表 JDK1.8：数组+链表&#x2F;红黑树 对比： jdk8当链表大于等于8会变成红黑树 jdk7采用的是插入头节点，jdk8采用的是插入尾节点（因为红黑树） jdk8，hash算法的简化，并且不会出现死循环 1.扩容机制&...","link":"","photos":[],"count_time":{"symbolsCount":828,"symbolsTime":"1 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"HashMap","slug":"HashMap","count":1,"path":"api/tags/HashMap.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}}],"categories":6,"tags":13,"word_count":"68k","post_count":14}