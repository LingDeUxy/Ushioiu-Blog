{"title":"Spring事务传播机制","uid":"77f213291e2f36c95ae014c6c6641222","slug":"Spring事务传播机制","date":"2023-07-06T07:02:33.000Z","updated":"2023-07-06T07:02:36.391Z","comments":true,"path":"api/articles/Spring事务传播机制.json","keywords":null,"cover":"https://source.unsplash.com/9KcHl3Tp79k/1200x628","content":"<h1 id=\"Spring事务传播机制\"><a href=\"#Spring事务传播机制\" class=\"headerlink\" title=\"Spring事务传播机制\"></a>Spring事务传播机制</h1><p>简单理解，加入A方法在执行中调用B方法，然后A方法事务是否对B方法事务，B方法是否有事务，是否能对A方法事务产生影响，这些都是传播机制决定的。</p>\n<h3 id=\"7种传播机制\"><a href=\"#7种传播机制\" class=\"headerlink\" title=\"7种传播机制\"></a>7种传播机制</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">● REQUIRED：如果当前存在事务，则加入该事务；如果不存在事务，则创建一个新的事务。这是默认的传播行为。\n● SUPPORTS：如果当前存在事务，则加入该事务；如果不存在事务，则以非事务方式执行。\n● MANDATORY：如果当前存在事务，则加入该事务；如果不存在事务，则抛出异常。\n● REQUIRES_NEW：总是创建一个新的事务；如果当前存在事务，则挂起该事务。\n● NOT_SUPPORTED：总是以非事务方式执行；如果当前存在事务，则挂起该事务。\n● NEVER：总是以非事务方式执行；如果当前存在事务，则抛出异常。\n● NESTED：如果当前存在事务，则在该事务的嵌套事务中执行；如果不存在事务，则创建一个新的事务。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重要提示：<strong>Spring中事务的默认实现使用的是AOP，也就是代理的方式，如果大家在使用代码测试时，同一个Service类中的方法相互调用需要使用注入的对象来调用，不要直接使用this.方法名来调用，this.方法名调用是对象内部方法调用，不会通过Spring代理，也就是事务不会起作用</strong></p>\n<h3 id=\"REQUIRED-Spring默认的事务传播类型\"><a href=\"#REQUIRED-Spring默认的事务传播类型\" class=\"headerlink\" title=\"REQUIRED(Spring默认的事务传播类型)\"></a><strong>REQUIRED(Spring默认的事务传播类型)</strong></h3><p><strong>如果当前没有事务，则自己新建一个事务，如果当前存在事务，则加入这个事务</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertA</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//插入a1数据</span>\n    <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//插入b1数据</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入b2数据</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//这时候抛出异常后，因为myMain有事务，所以insertB加入了A事务，数据库不会插入数据</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertA</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//这样的话，因为A没有事务，所以insertB新建事务，然后异常后回滚自己事务，A中已经插入了a1数据，b1数据没有插入。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"SUPPORTS\"><a href=\"#SUPPORTS\" class=\"headerlink\" title=\"SUPPORTS\"></a><strong>SUPPORTS</strong></h3><p><strong>当前存在事务，则加入当前事务，如果当前没有事务，就以非事务方法执行</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertA</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUPPORTS</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//那这里的话，因为A没有事务，所以insertB也不会有事务，最后a1，b1插入了数据库</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"MANDATORY\"><a href=\"#MANDATORY\" class=\"headerlink\" title=\"MANDATORY\"></a><strong>MANDATORY</strong></h3><p><strong>当前存在事务，则加入当前事务，如果当前事务不存在，则抛出异常。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertA</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MANDATORY</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 如事务介绍，这里在调用insertB会抛出异常，a1插入数据库，insertB不会执行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"REQUIRES-NEW\"><a href=\"#REQUIRES-NEW\" class=\"headerlink\" title=\"REQUIRES_NEW\"></a><strong>REQUIRES_NEW</strong></h3><p><strong>创建一个新事务，如果存在当前事务，则挂起该事务。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertA</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//插入a1数据</span>\n    <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRES_NEW</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//注意一下两个事务不一样</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//插入b1数据</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入b2数据</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 这里运行到insertB时，挂起myMain事务，然后新建insertB的事务，然后b1，b2没问题，插入数据库了，但是myMain出错，所以事务回滚，a1插入失败</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"NOT-SUPPORTED\"><a href=\"#NOT-SUPPORTED\" class=\"headerlink\" title=\"NOT_SUPPORTED\"></a><strong>NOT_SUPPORTED</strong></h3><p><strong>始终以非事务方式执行,如果当前存在事务，则挂起当前事务</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertA</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//插入a1数据</span>\n    <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_SUPPORTED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// b1成功插入，a1，b2失败了，insertB没有事务，所以b1插入后异常，a2失败，然后myMain的事务因为异常进行回滚，a1也没成功插入</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"NEVER\"><a href=\"#NEVER\" class=\"headerlink\" title=\"NEVER\"></a><strong>NEVER</strong></h3><p><strong>不使用事务，如果当前事务存在，则抛出异常</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//插入a1</span>\n    <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NEVER</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//插入b1</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//插入b2</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// testMain有事务，然后testB就会抛出异常，然后testMain回滚，然后没有数据插入数据库。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"NESTED\"><a href=\"#NESTED\" class=\"headerlink\" title=\"NESTED\"></a><strong>NESTED</strong></h3><p><strong>如果当前事务存在，则在嵌套事务中执行，否则REQUIRED的操作一样（开启一个事务）</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>     \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NESTED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// testMain的事务 包含 testB的事务，然后时testMain出错，所以都回滚，没有数据插入</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span>（<span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NESTED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 这个例子就是 testB事务出错，所以testB回滚，但是不会影响testMain事务，所以a1，a2会插入，但是b1，b2不会插入。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"Spring事务传播机制简单理解，加入A方法在执行中调用B方法，然后A方法事务是否对B方法事务，B方法是否有事务，是否能对A方法事务产生影响，这些都是传播机制决定的。 7种传播机制● REQUIRED：如果当前存在事务，则加入该事务；如果不存在事务，则创建一个新的事务。这是默认的...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"事务传播机制","slug":"事务传播机制","count":1,"path":"api/tags/事务传播机制.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">Spring事务传播机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E7%A7%8D%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">7种传播机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#REQUIRED-Spring%E9%BB%98%E8%AE%A4%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">REQUIRED(Spring默认的事务传播类型)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SUPPORTS\"><span class=\"toc-text\">SUPPORTS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MANDATORY\"><span class=\"toc-text\">MANDATORY</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#REQUIRES-NEW\"><span class=\"toc-text\">REQUIRES_NEW</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NOT-SUPPORTED\"><span class=\"toc-text\">NOT_SUPPORTED</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NEVER\"><span class=\"toc-text\">NEVER</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NESTED\"><span class=\"toc-text\">NESTED</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":null},"baidu":{"icon":"iconfont icon-baidu","link":null}}}},"mapped":true,"prev_post":{"title":"Nginx","uid":"af6a277a1f79cc7652a602f9f57ed64f","slug":"Nginx","date":"2023-07-06T11:02:33.000Z","updated":"2023-07-06T11:10:21.060Z","comments":true,"path":"api/articles/Nginx.json","keywords":null,"cover":"https://picx.zhimg.com/v2-e68d524210343613129267bd2cb75a0d_1440w.jpg?source=172ae18b","text":"Nginx详解 正向代理 正向代理（forward）意思是一个位于客户端和原始服务器 (origin server) 之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标 (原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。 正向代理是为...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"服务器","slug":"服务器","count":1,"path":"api/categories/服务器.json"}],"tags":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/tags/Nginx.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":null},"baidu":{"icon":"iconfont icon-baidu","link":null}}}}},"next_post":{"title":"JEECG低代码平台入门","uid":"355e4e72c743c63d64d3d438f298fc52","slug":"JEECG低代码平台入门","date":"2023-07-01T02:01:21.000Z","updated":"2023-07-03T11:29:06.307Z","comments":true,"path":"api/articles/JEECG低代码平台入门.json","keywords":null,"cover":"/img/post/image-20230703171414615.png","text":"JEECG低代码平台 官网：JEECG官方网站 - 基于BPM的低代码开发平台 一、下载源码标题栏下载按钮或者源码下载 — JEECG低代码开发平台 - 官方网站 （vue2，vue3咱们都说一下） 环境条件：jdk，mysql，redis，idea 二、运行源码项目db目录下有...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"低代码","slug":"低代码","count":1,"path":"api/categories/低代码.json"}],"tags":[{"name":"JEECG","slug":"JEECG","count":1,"path":"api/tags/JEECG.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":null},"baidu":{"icon":"iconfont icon-baidu","link":null}}}}}}