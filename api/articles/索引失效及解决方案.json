{"title":"索引失效及解决方案","uid":"cf2530e605eef344277b43fda2e83990","slug":"索引失效及解决方案","date":"2022-11-09T02:18:21.000Z","updated":"2023-07-06T07:30:13.191Z","comments":true,"path":"api/articles/索引失效及解决方案.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.peU5b4iXsv9YM_os6ZD7CgAAAA?w=154&h=180&c=7&r=0&o=5&pid=1.7","content":"<h1 id=\"索引失效及解决方案\"><a href=\"#索引失效及解决方案\" class=\"headerlink\" title=\"索引失效及解决方案\"></a>索引失效及解决方案</h1><h2 id=\"失效原因-x2F-场景\"><a href=\"#失效原因-x2F-场景\" class=\"headerlink\" title=\"失效原因&#x2F;场景\"></a>失效原因&#x2F;场景</h2><ol>\n<li>索引列不独立</li>\n<li>使用了左模糊</li>\n<li>使用 or 查询部分字段没有使用索引</li>\n<li>字符串条件没有使用 ‘’</li>\n<li>不符合最左前缀原则的查询</li>\n<li>索引字段没有添加 not null 约束</li>\n<li>隐式转换导致索引失效</li>\n</ol>\n<h4 id=\"索引列不独立是指-被索引的这列不能是表达式的一部分，不能是函数的参数，比如下面的这种情况\"><a href=\"#索引列不独立是指-被索引的这列不能是表达式的一部分，不能是函数的参数，比如下面的这种情况\" class=\"headerlink\" title=\"索引列不独立是指 被索引的这列不能是表达式的一部分，不能是函数的参数，比如下面的这种情况\"></a><strong>索引列不独立是指 被索引的这列不能是表达式的一部分，不能是函数的参数，比如下面的这种情况</strong></h4><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select id,name,age,salary from table_name where salary + 1000 &#x3D; 6000;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>salary 列被用户表达式的计算了，这种情况下索引就会失效，解决方式就是提前计算好条件值，不要让索引列参与表达式计算，修改后 sql 如下</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select id,name,age,salary from table_name where salary &#x3D; 5000;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"索引字段作为函数的参数\"><a href=\"#索引字段作为函数的参数\" class=\"headerlink\" title=\"索引字段作为函数的参数\"></a><strong>索引字段作为函数的参数</strong></h4><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select id,name,age,salary from table_name where substring(name,1,3)&#x3D; &#39;luc&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>解决方式是什么呢，可以提前计算好条件，不要使用索引，或者可以使用其他的 sql 替换上面的，比如，上面的sql 可以使用 like 来代替</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select id,name,age,salary from table_name where name like &#39;luc%&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"使用了左模糊\"><a href=\"#使用了左模糊\" class=\"headerlink\" title=\"使用了左模糊\"></a><strong>使用了左模糊</strong></h4><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select id,name,age,salary from table_name where name like &#39;%lucs%&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>平时尽可能避免用到左模糊，可以这样写</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select id,name,age,salary from table_name where name like &#39;lucs%&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果实在避免不了左模糊查询的话，考虑一下搜索引擎 比如 ES</p>\n<h4 id=\"or-查询部分字段没有使用索引\"><a href=\"#or-查询部分字段没有使用索引\" class=\"headerlink\" title=\"or 查询部分字段没有使用索引\"></a><strong>or 查询部分字段没有使用索引</strong></h4><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select id,name,age,salary from table_name where name &#x3D;&#39;lucs&#39; and age &gt;25<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这种情况，可以为 name 和 age 都建立索引，否则会走全表扫描。</p>\n<h4 id=\"字符串条件没有使用-‘’\"><a href=\"#字符串条件没有使用-‘’\" class=\"headerlink\" title=\"字符串条件没有使用 ‘’\"></a><strong>字符串条件没有使用 ‘’</strong></h4><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select id,name,age,salary from table_name where phone&#x3D;13088772233 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上面的这条 sql phone 字段类型是 字符串类型的，但是没有使用 ‘13088772233 ‘, SQL 就全表扫描了，所以字符串索引要使用 ‘’</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select id,name,age,salary from table_name where phone&#x3D;&#39;13088772233 &#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"不符合最左前缀原则的查询\"><a href=\"#不符合最左前缀原则的查询\" class=\"headerlink\" title=\"不符合最左前缀原则的查询\"></a><strong>不符合最左前缀原则的查询</strong></h4><p>例如有这样一个组合索引 index(a,b,c)</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select * from table_name where b&#x3D;&#39;1&#39;and c&#x3D;&#39;2&#39;\nselect * from table_name where c&#x3D;&#39;2&#39;\n-- 上面这两条 SQL 都是无法走索引执行的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>最左原则，就是要最左边的优先存在，我不在的话，你们自己就玩不动了，除非你自己单独创立一个索引，下面这几条 SQL 就可以走索引执行</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select * from table_name where a &#x3D; &#39;asaa&#39; and b&#x3D;&#39;1&#39;and c&#x3D;&#39;2&#39;\nselect * from table_name where a &#x3D; &#39;asda&#39; and b&#x3D;&#39;1231&#39; \n-- 上面这两条是走索引的，但是下面这条你觉得索引应该怎么走，是全部走，还是部分走索引？\nselect * from table_name where a &#x3D; &#39;asda&#39; and c&#x3D;&#39;dsfsdafsfsd&#39; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"索引字段没有添加-not-null-约束\"><a href=\"#索引字段没有添加-not-null-约束\" class=\"headerlink\" title=\"索引字段没有添加 not null 约束\"></a><strong>索引字段没有添加 not null 约束</strong></h4><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select * from table_name where a is null;\n-- 这条sql就无法走索引执行了，is null 条件 不能使用索引，只能全表扫描了\n-- mysql 官方建议是把字段设置为 not null <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a><strong>隐式转换</strong></h4><p>关联表的两个字段类型不一致会发生隐式转换</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select * from table_name t1 left join table_name2 t2 on t1.id&#x3D;t2.tid;\n-- 上面这条语句里，如果 t1 表的id 类型和 t2 表的tid 类型不一致的时候，就无法\n-- 按索引执行了。\n-- 解决方式就是统一设置字段类型。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>转载：<a href=\"https://zhuanlan.zhihu.com/p/166247445\">https://zhuanlan.zhihu.com/p/166247445</a></p></blockquote>\n","text":"索引失效及解决方案失效原因&#x2F;场景 索引列不独立 使用了左模糊 使用 or 查询部分字段没有使用索引 字符串条件没有使用 ‘’ 不符合最左前缀原则的查询 索引字段没有添加 not null 约束 隐式转换导致索引失效 索引列不独立是指 被索引的这列不能是表达式的一部分，不...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据库","slug":"数据库","count":1,"path":"api/categories/数据库.json"}],"tags":[{"name":"索引失效","slug":"索引失效","count":1,"path":"api/tags/索引失效.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">索引失效及解决方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%B1%E6%95%88%E5%8E%9F%E5%9B%A0-x2F-%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">失效原因&#x2F;场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%88%97%E4%B8%8D%E7%8B%AC%E7%AB%8B%E6%98%AF%E6%8C%87-%E8%A2%AB%E7%B4%A2%E5%BC%95%E7%9A%84%E8%BF%99%E5%88%97%E4%B8%8D%E8%83%BD%E6%98%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%8C%E4%B8%8D%E8%83%BD%E6%98%AF%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C%E6%AF%94%E5%A6%82%E4%B8%8B%E9%9D%A2%E7%9A%84%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5\"><span class=\"toc-text\">索引列不独立是指 被索引的这列不能是表达式的一部分，不能是函数的参数，比如下面的这种情况</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%AD%97%E6%AE%B5%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">索引字段作为函数的参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E4%BA%86%E5%B7%A6%E6%A8%A1%E7%B3%8A\"><span class=\"toc-text\">使用了左模糊</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#or-%E6%9F%A5%E8%AF%A2%E9%83%A8%E5%88%86%E5%AD%97%E6%AE%B5%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">or 查询部分字段没有使用索引</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%A1%E4%BB%B6%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8-%E2%80%98%E2%80%99\"><span class=\"toc-text\">字符串条件没有使用 ‘’</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E7%AC%A6%E5%90%88%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80%E5%8E%9F%E5%88%99%E7%9A%84%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">不符合最左前缀原则的查询</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%AD%97%E6%AE%B5%E6%B2%A1%E6%9C%89%E6%B7%BB%E5%8A%A0-not-null-%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">索引字段没有添加 not null 约束</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">隐式转换</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":null},"baidu":{"icon":"iconfont icon-baidu","link":null}}}},"mapped":true,"prev_post":{"title":"设计模式","uid":"deffdaaa2a24a19ee257667b3b36743c","slug":"设计模式","date":"2022-12-23T03:22:13.000Z","updated":"2023-07-10T08:08:02.750Z","comments":true,"path":"api/articles/设计模式.json","keywords":null,"cover":"https://source.unsplash.com/VivsxaizzVE/1200x628","text":"一、设计模式的六大原则（SOLID）总原则——开闭原则（Open Closed Principle） 一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。 在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":null},"baidu":{"icon":"iconfont icon-baidu","link":null}}}}},"next_post":{"title":"系统架构演变","uid":"4d8037d4e1b16b3676d4b80209195ebc","slug":"系统架构发展","date":"2022-10-10T12:18:21.000Z","updated":"2023-07-06T07:03:23.739Z","comments":true,"path":"api/articles/系统架构发展.json","keywords":null,"cover":"/img/post/image-20230705191839467.png","text":"1.单体架构比如我们一开始写的ssm框架就是，从数据库访问层，业务逻辑层，控制层，从前端到后端都是一起开发的单体应用。 优点：部署在一个节点上，维护方便，开发方便。 缺点：一处错可能导致应用出错，代码耦合性高，不方便扩展，不利于开发大项目 2.垂直应用架构随着访问量的逐渐增大，单...","link":"","photos":[],"count_time":{"symbolsCount":650,"symbolsTime":"1 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"系统架构","slug":"系统架构","count":1,"path":"api/tags/系统架构.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":null},"baidu":{"icon":"iconfont icon-baidu","link":null}}}}}}