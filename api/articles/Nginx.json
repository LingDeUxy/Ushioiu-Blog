{"title":"Nginx","uid":"af6a277a1f79cc7652a602f9f57ed64f","slug":"Nginx","date":"2023-07-06T11:02:33.000Z","updated":"2023-07-06T11:10:21.060Z","comments":true,"path":"api/articles/Nginx.json","keywords":null,"cover":"https://picx.zhimg.com/v2-e68d524210343613129267bd2cb75a0d_1440w.jpg?source=172ae18b","content":"<h1 id=\"Nginx详解\"><a href=\"#Nginx详解\" class=\"headerlink\" title=\"Nginx详解\"></a>Nginx详解</h1><p><img src=\"/img/post/image-20230706185355204.png\" alt=\"image-20230706185355204\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>正向代理</p></blockquote>\n<p>正向代理（forward）意思是一个位于客户端和原始服务器 (origin server) 之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标 (原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p>\n<p>正向代理是为我们服务的，即为客户端服务的，客户端可以根据正向代理访问到它本身无法访问到的服务器资源。</p>\n<p>正向代理对我们是透明的，对服务端是非透明的，即服务端并不知道自己收到的是来自代理的访问还是来自真实客户端的访问。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>反向代理</p></blockquote>\n<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<p>反向代理是为服务端服务的，反向代理可以帮助服务器接收来自客户端的请求，帮助服务器做请求转发，负载均衡等。</p>\n<p>反向代理对服务端是透明的，对我们是非透明的，即我们并不知道自己访问的是代理服务器，而服务器知道反向代理在为他服务。</p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p><strong>Nginx支持的负载均衡调度算法方式如下：</strong></p>\n<p><strong>weight轮询(默认，常用)：</strong>接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。ip_hash（常用）：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</p>\n<p><strong>fair：</strong>智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</p>\n<h3 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h3><p>为了加快服务器的解析速度，可以把动态页面和静态页面交给不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。</p>\n<h4 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">\n# 快速关闭Nginx，可能不保存相关信息，并迅速终止web服务\nnginx -s stop\n# 平稳关闭Nginx，保存相关信息，有安排的结束web服务\nnginx -s quit\n# 因改变了Nginx相关配置，需要重新加载配置而重载\nnginx -s reload\n# 重新打开日志文件\nnginx -s reopen\n# 为 Nginx 指定一个配置文件，来代替缺省的\nnginx -c filename\n# 不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件\nnginx -t\n#  显示 nginx 的版本\nnginx -v\n# 显示 nginx 的版本，编译器版本和配置参数\nnginx -V\n# 格式换显示 nginx 配置参数\n2&gt;&amp;1 nginx -V | xargs -n1\n2&gt;&amp;1 nginx -V | xargs -n1 | grep lua<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"为什么使用Nginx\"><a href=\"#为什么使用Nginx\" class=\"headerlink\" title=\"为什么使用Nginx\"></a>为什么使用Nginx</h3><p>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。在Nginx网站上，其功能包括：</p>\n<ul>\n<li>HTTP和HTTPS（TLS &#x2F; SSL &#x2F; SNI）</li>\n<li>超快速的Web服务器用于静态内容</li>\n<li>FastCGI，WSGI，SCGI用于动态内容</li>\n<li>具有负载平衡和缓存功能的加速Web代理</li>\n<li>不间断实时二进制升级和配置</li>\n<li>压缩和内容过滤器</li>\n<li>虚拟主机</li>\n<li>FLV和MP4的媒体流</li>\n<li>带宽和连接策略</li>\n<li>全面的访问控制</li>\n<li>自定义日志</li>\n<li>嵌入式脚本</li>\n<li>带有TLS的SMTP &#x2F; IMAP &#x2F; POP3的邮件代理</li>\n<li>逻辑，灵活，可扩展的配置</li>\n<li>在Linux，FreeBSD，Mac OS X，Solaris和Windows上运行</li>\n</ul>\n<h2 id=\"优势：\"><a href=\"#优势：\" class=\"headerlink\" title=\"优势：\"></a>优势：</h2><h4 id=\"IO多路复用epoll（IO复用）：\"><a href=\"#IO多路复用epoll（IO复用）：\" class=\"headerlink\" title=\"IO多路复用epoll（IO复用）：\"></a>IO多路复用epoll（IO复用）：</h4><p>如何理解呢？举个例子吧！<br>有A、B、C三个老师，他们都遇到一个难题，要帮助一个班级的学生解决课堂作业。<br>老师A采用从第一排开始一个学生一个学生轮流解答的方式去回答问题，老师A浪费了很多时间，并且有的学生作业还没有完成呢，老师就来了，反反复复效率极慢。<br>老师B是一个忍者，他发现老师A的方法行不通，于是他使用了影分身术，分身出好几个自己同一时间去帮好几个同学回答问题，最后还没回答完，老师B消耗光了能量累倒了。<br>老师C比较精明，他告诉学生，谁完成了作业举手，有举手的同学他才去指导问题，他让学生主动发声，分开了“并发”。<br>这个老师C就是Nginx。</p>\n<h4 id=\"轻量级：\"><a href=\"#轻量级：\" class=\"headerlink\" title=\"轻量级：\"></a>轻量级：</h4><ul>\n<li>功能模块少 - Nginx仅保留了HTTP需要的模块，其他都用插件的方式，后天添加</li>\n<li>代码模块化 - 更适合二次开发，如阿里巴巴Tengine</li>\n</ul>\n<h4 id=\"CPU亲和：\"><a href=\"#CPU亲和：\" class=\"headerlink\" title=\"CPU亲和：\"></a>CPU亲和：</h4><p>把CPU核心和Nginx工作进程绑定，把每个worker进程固定在一个CPU上执行，减少切换CPU的cache miss，从而提高性能。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">\n#打开主配置文件，若你是用lnmp环境安装\nvim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf\n\n----------------------------------------\n\nuser                    #设置nginx服务的系统使用用户\nworker_processes        #工作进程数 一般情况与CPU核数保持一致\nerror_log               #nginx的错误日志\npid                     #nginx启动时的pid\n\nevents &#123;\n    worker_connections    #每个进程允许最大连接数\n    use                   #nginx使用的内核模型\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们使用 nginx 的 http 服务，在配置文件 nginx.conf 中的 http 区域内，配置无数个 server ，每一个 server 对应这一个虚拟主机或者域名。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\nhttp &#123;\n    ... ...        #后面再详细介绍 http 配置项目\n    \n    server &#123;\n        listen 80                          #监听端口;\n        server_name localhost              #地址\n        \n        location &#x2F; &#123;                       #访问首页路径\n            root &#x2F;xxx&#x2F;xxx&#x2F;index.html       #默认目录\n            index index.html index.htm     #默认文件\n        &#125;        \n        \n        error_page  500 504   &#x2F;50x.html    #当出现以上状态码时从新定义到50x.html\n        location &#x3D; &#x2F;50x.html &#123;             #当访问50x.html时\n            root &#x2F;xxx&#x2F;xxx&#x2F;html             #50x.html 页面所在位置\n        &#125;        \n    &#125;\n    \n    server &#123;\n        ... ... \n    &#125; \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一个 server 可以出现多个 location ，我们对不同的访问路径进行不同情况的配置。</p>\n<p>我们再来看看 http 的配置详情</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\nhttp &#123;\n    sendfile  on                  #高效传输文件的模式 一定要开启\n    keepalive_timeout   65        #客户端服务端请求超时时间\n    log_format  main   XXX        #定义日志格式 代号为main\n    access_log  &#x2F;usr&#x2F;local&#x2F;access.log  main     #日志保存地址 格式代码 main\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是 nginx 一些配置中常用的内置全局变量，你可以在配置的任何位置使用它们。</p>\n<p><img src=\"/img/post/image-20230706190232501.png\" alt=\"image-20230706190232501\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>详情:<a href=\"https://mp.weixin.qq.com/s/XoqGvYBabW8YBl9xEeNYZw\">https://mp.weixin.qq.com/s/XoqGvYBabW8YBl9xEeNYZw</a></p></blockquote>\n","text":"Nginx详解 正向代理 正向代理（forward）意思是一个位于客户端和原始服务器 (origin server) 之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标 (原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。 正向代理是为...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"服务器","slug":"服务器","count":1,"path":"api/categories/服务器.json"}],"tags":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/tags/Nginx.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nginx%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">Nginx详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"><span class=\"toc-text\">负载均衡</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB\"><span class=\"toc-text\">动静分离</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">常用指令</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8Nginx\"><span class=\"toc-text\">为什么使用Nginx</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8A%BF%EF%BC%9A\"><span class=\"toc-text\">优势：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8epoll%EF%BC%88IO%E5%A4%8D%E7%94%A8%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">IO多路复用epoll（IO复用）：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BD%BB%E9%87%8F%E7%BA%A7%EF%BC%9A\"><span class=\"toc-text\">轻量级：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CPU%E4%BA%B2%E5%92%8C%EF%BC%9A\"><span class=\"toc-text\">CPU亲和：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">配置</span></a></li></ol></li></ol>","author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}},"mapped":true,"prev_post":{"title":"hexo+aurora快速搭建","uid":"d89b2fe5b495167a2d209b5600ce7615","slug":"Hexo+Aurora快速搭建","date":"2023-06-26T12:32:20.000Z","updated":"2023-07-11T11:07:31.089Z","comments":true,"path":"api/articles/Hexo+Aurora快速搭建.json","keywords":null,"cover":"https://source.unsplash.com/9KcHl3Tp79k/1200x628","text":"Hexo快速上手ps：如果完全是小白的话，可以先了解使用一下npm（使用过或者知道怎么使用，有一定前端知识就可以看下面的了，如果过程中有什么模糊的词汇，可以先百度看看，要不容易踩坑，都是过来人-0.0-） 环境需求 npm install -g hexo-cli 官方文档➡文档 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"hexo","slug":"hexo","count":3,"path":"api/categories/hexo.json"}],"tags":[{"name":"hexo搭建","slug":"hexo搭建","count":3,"path":"api/tags/hexo搭建.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}},"feature":true},"next_post":{"title":"Spring事务传播机制","uid":"77f213291e2f36c95ae014c6c6641222","slug":"Spring事务传播机制","date":"2023-07-06T07:02:33.000Z","updated":"2023-07-06T07:02:36.391Z","comments":true,"path":"api/articles/Spring事务传播机制.json","keywords":null,"cover":"https://source.unsplash.com/9KcHl3Tp79k/1200x628","text":"Spring事务传播机制简单理解，加入A方法在执行中调用B方法，然后A方法事务是否对B方法事务，B方法是否有事务，是否能对A方法事务产生影响，这些都是传播机制决定的。 7种传播机制● REQUIRED：如果当前存在事务，则加入该事务；如果不存在事务，则创建一个新的事务。这是默认的...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"java","slug":"java","count":7,"path":"api/categories/java.json"}],"tags":[{"name":"事务传播机制","slug":"事务传播机制","count":1,"path":"api/tags/事务传播机制.json"}],"author":{"name":"Ushioiu","slug":"blog-author","avatar":"/img/account/ikun.jpeg","link":"/","description":"重新整理搭建博客中...","socials":{"github":"https://github.com/LingDeUxy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/qq_62219631","juejin":"https://juejin.cn/user/1621110612306008","customs":{}}}}}